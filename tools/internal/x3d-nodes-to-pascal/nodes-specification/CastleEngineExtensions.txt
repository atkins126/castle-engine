# -*- mode: shell-script -*-
#
# Specification of Castle Game Engine X3D extensions.
# See https://castle-engine.io/x3d_extensions.php .
# This file is in the format understood by
# our ../x3d-nodes-to-pascal/x3d-nodes-to-pascal.lpr
# and by White Dune scripts.
#
# Note that we only list here *new* X3D nodes.
# Extensions (new fields) to existing nodes must be listed in other txt files
# (otherwse x3d-nodes-to-pascal would not be able to handle them).
# ----------------------------------------------------------------------------

# "KambiAppearance" is just a synonym for "Appearance" now.
#
# Now we just add all new fields to the standard "Appearance" node.
# Reasons: we describe in shadow_maps_x3d paper
# our propositions for Appearance (without introducing KambiAppearance,
# as (in the future) these should not be specific to our engine),
# also InstantReality already has Appearance.blendMode.
#
# You can however use KambiAppearance in your models, this allows you
# to declare KambiAppearance by EXTERNPROTO and fallback on standard
# Appearance.
KambiAppearance : Appearance {
  auto-generate-more: true
}

GeneratedShadowMap : X3DSingleTextureNode {
  SFString   [in,out]      update           "NONE"
    range: ["NONE"|"NEXT_FRAME_ONLY"|"ALWAYS"]
  SFInt32    []            size             128
  SFNode     []            light            NULL
    range: X3DLightNode
  SFFloat    [in,out]      scale            4.0
  SFFloat    [in,out]      bias             4.0
  SFString   []            compareMode      "COMPARE_R_LEQUAL"
    range: ["COMPARE_R_LEQUAL"|"COMPARE_R_GEQUAL"|"NONE"]
}

Text3D : Text {
  auto-generate-more: true
  SFFloat    [in,out]      depth       0.1
    range: >= 0
    change: chGeometry
}

KambiInline : Inline {
  auto-generate-more: true
  MFString   [in,out]      replaceNames  []
    change: chEverything
  MFNode     [in,out]      replaceNodes  []
    range: X3DNode
    change: chEverything
}

KambiNavigationInfo : NavigationInfo {
  SFBool []            timeOriginAtLoad           FALSE
  SFNode []            octreeRendering            NULL
    range: KambiOctreeProperties
  SFNode []            octreeDynamicCollisions    NULL
    range: KambiOctreeProperties
  SFNode []            octreeVisibleTriangles     NULL
    range: KambiOctreeProperties
  SFNode []            octreeStaticCollisions     NULL
    range: KambiOctreeProperties
  SFFloat    [in,out]      headBobbing             0.02
    range: [0, 1)
  SFFloat    [in,out]      headBobbingTime         0.5
    range: > 0
  SFNode     [in,out]      headlightNode           NULL
    range: X3DLightNode
}

KambiHeadLight : X3DChildNode {
  SFFloat    [in,out]      ambientIntensity      0
    range: [0.0, 1.0]
  SFVec3f    [in,out]      attenuation           1 0 0
    range: [0, infinity)
  SFColor    [in,out]      color                 1 1 1
    range: [0, 1]
  SFFloat    [in,out]      intensity             1
    range: [0, 1]
  SFBool     [in,out]      spot                  FALSE
  SFFloat    [in,out]      spotDropOffRate       0
  SFFloat    [in,out]      spotCutOffAngle       0.785398
}

KambiOctreeProperties : X3DNode {
  SFInt32 []            maxDepth              -1
    range:  >= -1
  SFInt32 []            leafCapacity          -1
    range:  >= -1
}

Teapot : X3DGeometryNode {
  auto-generate-more: true
  SFVec3f    []            size        3 3 3
  SFBool     []            solid       TRUE
  SFBool     []            manifold    FALSE
  SFNode     [in,out]      texCoord    NULL
    range: TextureCoordinateGenerator, ProjectedTextureCoordinate, MultiGeneratedTextureCoordinate
}

RenderedTexture : X3DSingleTextureNode {
  MFInt32    [in,out]      dimensions            [128 128 4 1 1]
  SFString   [in,out]      update                "NONE"
    range: ["NONE"|"NEXT_FRAME_ONLY"|"ALWAYS"]
  # note that we allow even VRML 1.0 cameras by TAbstractViewpointNode
  SFNode     [in,out]      viewpoint             NULL
    range: X3DViewpointNode, ViewpointMirror
  SFNode     []            textureProperties     NULL
    range: TextureProperties
  SFBool     []            repeatS               TRUE
  SFBool     []            repeatT               TRUE
  SFBool     []            repeatR               TRUE
  MFBool     [in,out]      depthMap              []
}

Logger : X3DChildNode {
  auto-generate-more: true
  SFInt32    [in,out]      level       1
  SFString   []            logFile     ""
  SFBool     [in,out]      enabled     TRUE
  XFAny      [in]          write
}

MultiGeneratedTextureCoordinate : X3DTextureCoordinateNode {
  MFNode [in,out] texCoord NULL
    range: TextureCoordinateGenerator, ProjectedTextureCoordinate
}

ProjectedTextureCoordinate : X3DSingleTextureCoordinateNode {
  SFNode     [in,out]      projector   NULL
    range: SpotLight, DirectionalLight, X3DViewpointNode
}

# See https://castle-engine.io/x3d_extensions_screen_effects.php
ScreenEffect : X3DChildNode {
  SFBool     [in,out]      enabled     TRUE
  SFBool     [in,out]      needsDepth  FALSE
  MFNode     [in,out]      shaders     []
    range: X3DShaderNode
}

# See https://castle-engine.io/compositing_shaders.php
Effect : X3DChildNode {
  SFString   []            language    ""
    range: ["CG"|"GLSL"|"HLSL"]
    # TODO: use enumerated-type:.... allowed values are like ComposedShader.language
  SFBool     [in,out]      enabled     TRUE
  MFNode     []            parts       []
    range: EffectPart

  # And any number of uniform variables, just like for ComposedShader node:
  fieldType []       fieldName
  fieldType [in]     fieldName
  fieldType [out]    fieldName
  fieldType [in,out] fieldName
}

# See https://castle-engine.io/compositing_shaders.php
EffectPart : X3DNode, X3DUrlObject {
  default-container-field: parts
  # may be changed to [in,out] one day
  MFString []       url      []
  SFString []       type     "VERTEX"
    range: ["VERTEX"|"FRAGMENT"]
    # TODO: use enumerated-type:....
}

# See https://castle-engine.io/compositing_shaders.php
ShaderTexture : X3DSingleTextureNode {
  MFNode   []       effects         []
    range: Effect
  SFString []       defaultTexCoord "BOUNDS2D"
    range: ["BOUNDS2D"|"BOUNDS3D"]
    # TODO: use enumerated-type:....
}

# See https://castle-engine.io/x3d_extensions.php#section_ext_blending
BlendMode {
  SFString   [in,out]      srcFactor   "src_alpha"
    range: [none, zero, one, dst_color, src_color, one_minus_dst_color, one_minus_src_color, src_alpha, one_minus_src_alpha, dst_alpha, one_minus_dst_alpha, src_alpha_saturate, constant_color, one_minus_constant_color, constant_alpha, one_minus_constant_alpha]
    # TODO: use enumerated-type:....
  SFString   [in,out]      destFactor  "one_minus_src_alpha"
    range: [none, zero, one, dst_color, src_color, one_minus_dst_color, one_minus_src_color, src_alpha, one_minus_src_alpha, dst_alpha, one_minus_dst_alpha, src_alpha_saturate, constant_color, one_minus_constant_color, constant_alpha, one_minus_constant_alpha]
    # TODO: use enumerated-type:....
  SFColor    [in,out]      color       1 1 1
  SFFloat    [in,out]      colorTransparency  0
}

# See https://castle-engine.io/x3d_implementation_eventutilities_extensions.php
Toggler  : X3DChildNode {
  SFBool     [in,out]      status      FALSE
  SFBool     [in,out]      notStatus   TRUE
  XFAny      [in]          toggle
    # the type/value send here is ignored
  XFAny      [in]          set
    # the type/value send here is ignored
  XFAny      [in]          reset
    # the type/value send here is ignored
  SFBool     [out]         changed
    # always sends TRUE
  SFBool     [out]         on
    # always sends TRUE
  SFBool     [out]         off
    # always sends TRUE
  SFBool     [in,out]      enabled     TRUE
}

ViewpointMirror {
  auto-generate-more: true
  default-container-field: viewpoint
  SFFloat   [in,out]      distanceFromShape 0.01
}

OrientationInterpolator2D : X3DInterpolatorNode {
  MFFloat    [in,out] keyValue      []
  SFVec3f    [in,out] axis          0 0 1
  SFRotation [out]    value_changed
}
